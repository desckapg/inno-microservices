name: CI Pipeline

on:
  pull_request:
    branches: [ '*' ]
  push:
    branches: [ '*' ]

env:
  JAVA_VERSION: '21'
  GRADLE_VERSION: 'wrapper'

jobs:
  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.changes.outputs.matrix }}
      has-changes: ${{ steps.changes.outputs.has-changes }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Detect changed services
        id: changes
        run: |
          SERVICES=$(grep -E "include\(|project\(" settings.gradle.kts | sed -E 's/.*["\x27:]([^"\x27]+)["\x27].*/\1/g' | tr '\n' ' ')
          
          if [ "${{ github.event_name }}" == "push" ] && [ "${{ github.ref }}" == "refs/heads/main" ]; then
            CHANGED_SERVICES=$SERVICES
          else
            if [ "${{ github.event_name }}" == "pull_request" ]; then
              BASE_SHA=${{ github.event.pull_request.base.sha }}
              HEAD_SHA=${{ github.event.pull_request.head.sha }}
            else
              BASE_SHA=${{ github.event.before }}
              HEAD_SHA=${{ github.sha }}
            fi
            
            CHANGED_FILES=$(git diff --name-only $BASE_SHA..$HEAD_SHA || git diff --name-only HEAD~1)
            CHANGED_SERVICES=""
            
            for service in $SERVICES; do
              service_clean=$(echo $service | sed 's/^://g')
              if echo "$CHANGED_FILES" | grep -q "^$service_clean/"; then
                CHANGED_SERVICES="$CHANGED_SERVICES $service"
              fi
            done
            
            if echo "$CHANGED_FILES" | grep -qE "(build\.gradle\.kts|settings\.gradle\.kts|gradle\.properties|\.github/workflows/|buildSrc/)"; then
              CHANGED_SERVICES=$SERVICES
            fi
          fi
          
          if [ -n "$CHANGED_SERVICES" ]; then
            MATRIX_JSON=$(echo $CHANGED_SERVICES | tr ' ' '\n' | grep -v '^$' | sed 's/^://g' | jq -R . | jq -s .)
            echo "matrix={\"service\":$MATRIX_JSON}" >> $GITHUB_OUTPUT
            echo "has-changes=true" >> $GITHUB_OUTPUT
            echo "Changed services: $CHANGED_SERVICES"
          else
            echo "matrix={\"service\":[]}" >> $GITHUB_OUTPUT
            echo "has-changes=false" >> $GITHUB_OUTPUT
            echo "No service changes detected"
          fi

  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.has-changes == 'true'
    strategy:
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
      fail-fast: false
    outputs:
      version: ${{ steps.version.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up JDK 21
        uses: actions/setup-java@v5
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle.kts', '**/gradle-wrapper.properties', 'buildSrc/**/*.kt') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Build service
        run: ./gradlew :${{ matrix.service }}:build -x test

      - name: Run unit tests
        run: ./gradlew :${{ matrix.service }}:test

      - name: Run integration tests (with Testcontainers)
        run: ./gradlew :${{ matrix.service }}:integrationTest
        env:
          # Testcontainers будет использовать Docker daemon из Ubuntu runner
          TESTCONTAINERS_RYUK_DISABLED: false

      - name: Generate version
        id: version
        run: echo "version=$(date +'%Y%m%d')-${GITHUB_SHA::8}" >> $GITHUB_OUTPUT

      - name: Generate test report
        uses: dorny/test-reporter@v2
        if: success() || failure()
        with:
          name: ${{ matrix.service }} Tests
          path: |
            ${{ matrix.service }}/build/test-results/test/*.xml
            ${{ matrix.service }}/build/test-results/integrationTest/*.xml
          reporter: java-junit

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.service }}-build-artifacts
          path: |
            ${{ matrix.service }}/build/libs/*.jar
            ${{ matrix.service }}/build/classes/
          retention-days: 1

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ${{ matrix.service }}-test-results
          path: |
            ${{ matrix.service }}/build/test-results/
            ${{ matrix.service }}/build/reports/tests/
          retention-days: 7

  sonarqube:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    needs: [detect-changes, build-and-test]
    if: needs.detect-changes.outputs.has-changes == 'true'
    strategy:
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v5
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar-${{ matrix.service }}
          restore-keys: ${{ runner.os }}-sonar-

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle.kts', 'buildSrc/**/*.kt') }}
          restore-keys: ${{ runner.os }}-gradle-

      - name: Build and analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./gradlew :${{ matrix.service }}:build :${{ matrix.service }}:sonar --info

  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [detect-changes, build-and-test, sonarqube]
    if: needs.detect-changes.outputs.has-changes == 'true' && github.ref == 'refs/heads/main' && github.event_name == 'pull_request'
    strategy:
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Download build artifacts
        uses: actions/download-artifact@v5
        with:
          name: ${{ matrix.service }}-build-artifacts
          path: ${{ matrix.service }}/build/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ needs.build-and-test.outputs.version }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.service }}/
          file: ${{ matrix.service }}/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ matrix.service }}
          cache-to: type=gha,mode=max,scope=${{ matrix.service }}